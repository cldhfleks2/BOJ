0. define키워드는 치환해주는것

1. printf 로 string출력불가능함. string의 c_str() 함수로 char배열로 바꾸어 출력함

2. string에 char 하나씩 붙이려면 += 연산자 또는 push_back 함수사용

3. char배열에 어떤 입력값을 받게되면 입력되고 남은 모든 인덱스는 '\0' 문자로 입력받음

4. c 에서 bool값을 출력하는 서식문자는 없다. %d 를 이용하여 0 과 1 로밖에 출력불가

5. bool b[4] = {true}; // bool배열의 모든원소 초기화방법

6. scanf("%[^\n]s", ~~) : 공백포함한 한줄을 입력받는 방법.
scanf는 정규표현식에따른 입력을 받을수있음.
!!! 다만 한줄끝의 줄바꿈문자는 제거하지못함. 이후 %s을 받으면 줄바꿈문자만 읽어옴

7. while(scanf() != EOF)  // EOF(정수 -1)는 문자열을 끝날때까지 입력받는 방법.(에러가 나거나)
7-1. ~scanf() 도 같은 동작
7-2. scanf의 리턴값은 받아들인 정수나문자의 갯수.

8. 다차원 배열을 동적할당(new)할 경우 주소값이 연속적이지 않을 수 있다.

9. scanf("%d", )로 정수를 읽고, 다음으로 scanf("%c")로 문자를 읽을때 개행문자(\n) 도 읽어짐을 유의. 개행문자를 제거하려면 처음부터 scanf("%d\n") 으로 정수를 읽자

10. 심화 for문..
```cpp
 for(list<Person>::iterator iter = pl.begin(); iter != pl.end(); iter++){
        printf("%s %d\n",(*iter).getName().c_str(),(*iter).getAge()); }	
```
```cpp
for(auto p:pl) {
        printf("%s %d\n",p.getName().c_str(),p.getAge()); }
```
위 두가지는 같은동작을함. (list<person> pl; 이 선언된상태)
11. using std::pair;, using std::cout 등으로 using키워드는 함수하나씩 지정가능함
(using 과 typedef 차이 https://velog.io/@dal-pi/c-typedef-%EC%99%80-using%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90)

12. %d 다음 %c 하면 줄바꿈문자가 있으면 읽어냄

13. %c 다음 %c 이것또한 줄바꿈문자가 있으면 읽어냄

14. #define max(a, b) (a > b) ?a : b 가아닌 #define max(a, b) (((a) > (b)) ? (a) : (b))
매크로 함수를 쓸 때에는 모든 인자를 () 로 둘러싸야 하며, 매크로 함수 본문 또한 () 로 둘러싸야함.
=> 연산자 우선순위 문제로 원하지 않은 결과가 나옴
=> 이렇게 하더라도 "부작용"이 있는 인자 (예: a++) 등을 매크로 함수에 전달하면 안됨.
매크로 함수를 올바로 이해하고 쓰는 것은 힘듭니다. 정말로 필요한 경우가 아니라면 <algorithm>에 정의되어 있는 std::max 를 권장

15. IF문 조건에 여러개 나열시, 하나라도 true가되면 그이후에는 체크안하고 바로 실행문으로넘어감
=> 배열과 배열의 인덱스를 초과하는지 동시 비교시, 인덱스먼저비교후, 그다음 배열을 비교해야 out of index오류 안남

16. 변수타입 변수{초기화값}; 으로 변수 선언가능

17. max_element 사용법 (min_element동일)
int a[] = { 1, 2, 3, 4, 5 };
int* ret = max_element(a, a + 5); 일때
ret - a : 최댓값 인덱스 (같으면 작은인덱스)
*ret : 최댓값

18. std::fill로 다차원 배열 값설정시 주의점
동적할당한 다차원배열은 1차원 2차원 n차원각각 주소가 연속적이지않아서 오류가난다.
다차원배열일땐 memset등을 이용
=> 이때 for문을 어차피 사용해야되니까 그냥 코드로 작성하자...

19. tuple,   make_tuple,   std::tie
tuple<여러개> 여러쌍의 자료를 묶어서 사용가능
tie(a, b, c, ''') 이때 a, b, c는 하나의 튜플로 묶인것이나 한쌍의 페어를 한번에 저장
앞으로 make_tuple로 2개 이상 3개, 4개등등의 자료는 이렇게 묶어서 사용하면 편할듯

20. std::unique_ptr
사용하던 메모리를 delete할때 중복으로 사용되는경우등 어떤 메모리의 실제 소유 포인터(객체)
를 명확히 해주는 포인터.

21. greater<>() 
내림차순정렬할떄 쓰이는 간단한 컨테이너
comp는 오름차순

22. N인덱스(0포함) : N--
N번째(1부터) : --N

23. 함수 매개변수로 배열 참조방법
함수(T (&a)[N] ) => 포인터배열을 만드는것같은 느낌
사용은 func( arr ); 끝
2차원 배열또한 T (&a)[N][M] 으로 전달받으면됨

24.  "문자열"[i] 로 변수선언없이 사용가능 => String은 인덱싱이 가능


25. s += "a"  >   s = s + "a"   우측이 string의객체복사때문에 상당히 비효율적임
https://blog.naver.com/PostView.naver?blogId=hongjg3229&logNo=221865037379&categoryNo=34&parentCategoryNo=0&viewDate=&currentPage=3&postListTopCurrentPage=1&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=3

26. 문자열을 char배열로 전달받는 함수(char *str)에서
값빼기 : ~ = *str
값수정 : *str = ~
함수로 다음요소 호출시 : 함수(str + 1)

27. 벡터 객체 생성안하고 전달하는법
vector<int>({1, 2, 3, 4}) => 1, 2, 3, 4가 요소로 들어간 벡터 생성
vector<int> V({1, 2, 3, 4}) <= 객체로 생성하는법




