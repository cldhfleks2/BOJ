https://www.secmem.org/blog/2021/03/21/Disjoint-Set-Union-find/
합연산 : A트리의 루트노드를 B트리 루트노드의 자식으로 삽입
만약 루트노드가 아닌노드에 삽입한다면 연산횟수 최소 2회 증가

집합을 트리로 구현시 분리집합 판별가능


트리를 합칠때 항상 루트노드를 루트 노드의 자식으로 만든다는것
다른 방법보다 더 좋지만 최악의 선형트리가 생기는경우를 막을 수 없다.

=> 해결법 2가지 (합연산에서의 최악의 상황개선법)

1. 경로압축
- 부모노드를 찾으며 루트노드를 찾아가는과정에서 모든 원소의 부모노드를 루트노드로 갱신.(즉 find연산때마다 트리구조를 평평하게 만들어 모두 루트노드를 가리키게..)

결과적으로 모든 원소의 부모가 루트노드가 될 수 있다.
따라서 이후 다시 확인할때 O(1) 시간만에 확인가능. find 연산 에 유리
2. 랭크 압축
- 루트노드를 찾아가는 과정의 경로 자체를 줄일 수 있다.
하나 트리의 루트노드를 다른 트리의 루트노드의 자식으로만 합친다.
2-1. 트리의 깊이가 작은쪽을 큰쪽에 합한다.
- 합친트리의 깊이가 깊어진다면 1 증가
- 합친트리의 크기는 작은 트리 크기의 2배이상 증가. 
이말은 즉  합친트리의 깊이가 2가 되려면 최소한 깊이 1(최소원소수 1)인 트리 두개 
합친트리 깊이가 3이 되려면 최소한 깊이가 2(최소원소수 2)인 트리 2개
깊이가 4가 되려면 최소한 깊이가 깊이가 3(최소원소수 4)인 트리 2개
=> 1, 2, 4, 8, 16...
합친트리의 크기는 항상 작은 트리 크기의 2배이상 증가한다는것.



2-2. 트리의 크기가 작은쪽을 큰쪽에 합한다.


3. 경로압축 + 랭크압축
시간복잡도 O(a(N)) - a(N)은 거의 상수에 가깝. 
경로압축만으로 충분히 빠른시간에 동작.
트리구조를 바꾸면 안되는경우 랭크압축만 사용하여 O(log N)시간복잡도를 보장 가능


https://gmlwjd9405.github.io/2018/08/31/algorithm-union-find.html















